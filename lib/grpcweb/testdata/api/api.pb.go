// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	SimpleRequest
	SimpleResponse
	Name
	UnaryMessageRequest
	UnaryRepeatedRequest
	UnaryRepeatedMessageRequest
	UnaryRepeatedEnumRequest
	UnaryMapRequest
	UnaryMapMessageRequest
	UnaryOneofRequest
	UnaryEnumRequest
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Gender int32

const (
	Gender_Male   Gender = 0
	Gender_Female Gender = 1
)

var Gender_name = map[int32]string{
	0: "Male",
	1: "Female",
}
var Gender_value = map[string]int32{
	"Male":   0,
	"Female": 1,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SimpleRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

func (m *SimpleRequest) Reset()                    { *m = SimpleRequest{} }
func (m *SimpleRequest) String() string            { return proto.CompactTextString(m) }
func (*SimpleRequest) ProtoMessage()               {}
func (*SimpleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SimpleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SimpleRequest) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type SimpleResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *SimpleResponse) Reset()                    { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string            { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()               {}
func (*SimpleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SimpleResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Name struct {
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
}

func (m *Name) Reset()                    { *m = Name{} }
func (m *Name) String() string            { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()               {}
func (*Name) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Name) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Name) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type UnaryMessageRequest struct {
	Name *Name `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *UnaryMessageRequest) Reset()                    { *m = UnaryMessageRequest{} }
func (m *UnaryMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*UnaryMessageRequest) ProtoMessage()               {}
func (*UnaryMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UnaryMessageRequest) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

type UnaryRepeatedRequest struct {
	Name []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
}

func (m *UnaryRepeatedRequest) Reset()                    { *m = UnaryRepeatedRequest{} }
func (m *UnaryRepeatedRequest) String() string            { return proto.CompactTextString(m) }
func (*UnaryRepeatedRequest) ProtoMessage()               {}
func (*UnaryRepeatedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UnaryRepeatedRequest) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

type UnaryRepeatedMessageRequest struct {
	Name []*Name `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
}

func (m *UnaryRepeatedMessageRequest) Reset()                    { *m = UnaryRepeatedMessageRequest{} }
func (m *UnaryRepeatedMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*UnaryRepeatedMessageRequest) ProtoMessage()               {}
func (*UnaryRepeatedMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UnaryRepeatedMessageRequest) GetName() []*Name {
	if m != nil {
		return m.Name
	}
	return nil
}

type UnaryRepeatedEnumRequest struct {
	Genders []Gender `protobuf:"varint,1,rep,packed,name=genders,enum=api.Gender" json:"genders,omitempty"`
}

func (m *UnaryRepeatedEnumRequest) Reset()                    { *m = UnaryRepeatedEnumRequest{} }
func (m *UnaryRepeatedEnumRequest) String() string            { return proto.CompactTextString(m) }
func (*UnaryRepeatedEnumRequest) ProtoMessage()               {}
func (*UnaryRepeatedEnumRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UnaryRepeatedEnumRequest) GetGenders() []Gender {
	if m != nil {
		return m.Genders
	}
	return nil
}

type UnaryMapRequest struct {
	Kvs map[string]string `protobuf:"bytes,1,rep,name=kvs" json:"kvs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UnaryMapRequest) Reset()                    { *m = UnaryMapRequest{} }
func (m *UnaryMapRequest) String() string            { return proto.CompactTextString(m) }
func (*UnaryMapRequest) ProtoMessage()               {}
func (*UnaryMapRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UnaryMapRequest) GetKvs() map[string]string {
	if m != nil {
		return m.Kvs
	}
	return nil
}

type UnaryMapMessageRequest struct {
	Kvs map[string]*Name `protobuf:"bytes,1,rep,name=kvs" json:"kvs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UnaryMapMessageRequest) Reset()                    { *m = UnaryMapMessageRequest{} }
func (m *UnaryMapMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*UnaryMapMessageRequest) ProtoMessage()               {}
func (*UnaryMapMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UnaryMapMessageRequest) GetKvs() map[string]*Name {
	if m != nil {
		return m.Kvs
	}
	return nil
}

type UnaryOneofRequest struct {
	// Types that are valid to be assigned to Name:
	//	*UnaryOneofRequest_Msg
	//	*UnaryOneofRequest_Plain
	Name isUnaryOneofRequest_Name `protobuf_oneof:"name"`
}

func (m *UnaryOneofRequest) Reset()                    { *m = UnaryOneofRequest{} }
func (m *UnaryOneofRequest) String() string            { return proto.CompactTextString(m) }
func (*UnaryOneofRequest) ProtoMessage()               {}
func (*UnaryOneofRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isUnaryOneofRequest_Name interface {
	isUnaryOneofRequest_Name()
}

type UnaryOneofRequest_Msg struct {
	Msg *Name `protobuf:"bytes,1,opt,name=msg,oneof"`
}
type UnaryOneofRequest_Plain struct {
	Plain string `protobuf:"bytes,2,opt,name=plain,oneof"`
}

func (*UnaryOneofRequest_Msg) isUnaryOneofRequest_Name()   {}
func (*UnaryOneofRequest_Plain) isUnaryOneofRequest_Name() {}

func (m *UnaryOneofRequest) GetName() isUnaryOneofRequest_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *UnaryOneofRequest) GetMsg() *Name {
	if x, ok := m.GetName().(*UnaryOneofRequest_Msg); ok {
		return x.Msg
	}
	return nil
}

func (m *UnaryOneofRequest) GetPlain() string {
	if x, ok := m.GetName().(*UnaryOneofRequest_Plain); ok {
		return x.Plain
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UnaryOneofRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UnaryOneofRequest_OneofMarshaler, _UnaryOneofRequest_OneofUnmarshaler, _UnaryOneofRequest_OneofSizer, []interface{}{
		(*UnaryOneofRequest_Msg)(nil),
		(*UnaryOneofRequest_Plain)(nil),
	}
}

func _UnaryOneofRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UnaryOneofRequest)
	// name
	switch x := m.Name.(type) {
	case *UnaryOneofRequest_Msg:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Msg); err != nil {
			return err
		}
	case *UnaryOneofRequest_Plain:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Plain)
	case nil:
	default:
		return fmt.Errorf("UnaryOneofRequest.Name has unexpected type %T", x)
	}
	return nil
}

func _UnaryOneofRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UnaryOneofRequest)
	switch tag {
	case 1: // name.msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Name)
		err := b.DecodeMessage(msg)
		m.Name = &UnaryOneofRequest_Msg{msg}
		return true, err
	case 2: // name.plain
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Name = &UnaryOneofRequest_Plain{x}
		return true, err
	default:
		return false, nil
	}
}

func _UnaryOneofRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UnaryOneofRequest)
	// name
	switch x := m.Name.(type) {
	case *UnaryOneofRequest_Msg:
		s := proto.Size(x.Msg)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UnaryOneofRequest_Plain:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Plain)))
		n += len(x.Plain)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UnaryEnumRequest struct {
	Gender Gender `protobuf:"varint,1,opt,name=gender,enum=api.Gender" json:"gender,omitempty"`
}

func (m *UnaryEnumRequest) Reset()                    { *m = UnaryEnumRequest{} }
func (m *UnaryEnumRequest) String() string            { return proto.CompactTextString(m) }
func (*UnaryEnumRequest) ProtoMessage()               {}
func (*UnaryEnumRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UnaryEnumRequest) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_Male
}

func init() {
	proto.RegisterType((*SimpleRequest)(nil), "api.SimpleRequest")
	proto.RegisterType((*SimpleResponse)(nil), "api.SimpleResponse")
	proto.RegisterType((*Name)(nil), "api.Name")
	proto.RegisterType((*UnaryMessageRequest)(nil), "api.UnaryMessageRequest")
	proto.RegisterType((*UnaryRepeatedRequest)(nil), "api.UnaryRepeatedRequest")
	proto.RegisterType((*UnaryRepeatedMessageRequest)(nil), "api.UnaryRepeatedMessageRequest")
	proto.RegisterType((*UnaryRepeatedEnumRequest)(nil), "api.UnaryRepeatedEnumRequest")
	proto.RegisterType((*UnaryMapRequest)(nil), "api.UnaryMapRequest")
	proto.RegisterType((*UnaryMapMessageRequest)(nil), "api.UnaryMapMessageRequest")
	proto.RegisterType((*UnaryOneofRequest)(nil), "api.UnaryOneofRequest")
	proto.RegisterType((*UnaryEnumRequest)(nil), "api.UnaryEnumRequest")
	proto.RegisterEnum("api.Gender", Gender_name, Gender_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Example service

type ExampleClient interface {
	Unary(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryMessage(ctx context.Context, in *UnaryMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryRepeated(ctx context.Context, in *UnaryRepeatedRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryRepeatedMessage(ctx context.Context, in *UnaryRepeatedMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryRepeatedEnum(ctx context.Context, in *UnaryRepeatedEnumRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryMap(ctx context.Context, in *UnaryMapRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryMapMessage(ctx context.Context, in *UnaryMapMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryOneof(ctx context.Context, in *UnaryOneofRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	UnaryEnum(ctx context.Context, in *UnaryEnumRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (Example_ClientStreamingClient, error)
	ServerStreaming(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (Example_ServerStreamingClient, error)
	BidiStreaming(ctx context.Context, opts ...grpc.CallOption) (Example_BidiStreamingClient, error)
}

type exampleClient struct {
	cc *grpc.ClientConn
}

func NewExampleClient(cc *grpc.ClientConn) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) Unary(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/api.Example/Unary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryMessage(ctx context.Context, in *UnaryMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/api.Example/UnaryMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryRepeated(ctx context.Context, in *UnaryRepeatedRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/api.Example/UnaryRepeated", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryRepeatedMessage(ctx context.Context, in *UnaryRepeatedMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/api.Example/UnaryRepeatedMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryRepeatedEnum(ctx context.Context, in *UnaryRepeatedEnumRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/api.Example/UnaryRepeatedEnum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryMap(ctx context.Context, in *UnaryMapRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/api.Example/UnaryMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryMapMessage(ctx context.Context, in *UnaryMapMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/api.Example/UnaryMapMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryOneof(ctx context.Context, in *UnaryOneofRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/api.Example/UnaryOneof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UnaryEnum(ctx context.Context, in *UnaryEnumRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/api.Example/UnaryEnum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (Example_ClientStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Example_serviceDesc.Streams[0], c.cc, "/api.Example/ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleClientStreamingClient{stream}
	return x, nil
}

type Example_ClientStreamingClient interface {
	Send(*SimpleRequest) error
	CloseAndRecv() (*SimpleResponse, error)
	grpc.ClientStream
}

type exampleClientStreamingClient struct {
	grpc.ClientStream
}

func (x *exampleClientStreamingClient) Send(m *SimpleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleClientStreamingClient) CloseAndRecv() (*SimpleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) ServerStreaming(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (Example_ServerStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Example_serviceDesc.Streams[1], c.cc, "/api.Example/ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Example_ServerStreamingClient interface {
	Recv() (*SimpleResponse, error)
	grpc.ClientStream
}

type exampleServerStreamingClient struct {
	grpc.ClientStream
}

func (x *exampleServerStreamingClient) Recv() (*SimpleResponse, error) {
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) BidiStreaming(ctx context.Context, opts ...grpc.CallOption) (Example_BidiStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Example_serviceDesc.Streams[2], c.cc, "/api.Example/BidiStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleBidiStreamingClient{stream}
	return x, nil
}

type Example_BidiStreamingClient interface {
	Send(*SimpleRequest) error
	Recv() (*SimpleResponse, error)
	grpc.ClientStream
}

type exampleBidiStreamingClient struct {
	grpc.ClientStream
}

func (x *exampleBidiStreamingClient) Send(m *SimpleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleBidiStreamingClient) Recv() (*SimpleResponse, error) {
	m := new(SimpleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Example service

type ExampleServer interface {
	Unary(context.Context, *SimpleRequest) (*SimpleResponse, error)
	UnaryMessage(context.Context, *UnaryMessageRequest) (*SimpleResponse, error)
	UnaryRepeated(context.Context, *UnaryRepeatedRequest) (*SimpleResponse, error)
	UnaryRepeatedMessage(context.Context, *UnaryRepeatedMessageRequest) (*SimpleResponse, error)
	UnaryRepeatedEnum(context.Context, *UnaryRepeatedEnumRequest) (*SimpleResponse, error)
	UnaryMap(context.Context, *UnaryMapRequest) (*SimpleResponse, error)
	UnaryMapMessage(context.Context, *UnaryMapMessageRequest) (*SimpleResponse, error)
	UnaryOneof(context.Context, *UnaryOneofRequest) (*SimpleResponse, error)
	UnaryEnum(context.Context, *UnaryEnumRequest) (*SimpleResponse, error)
	ClientStreaming(Example_ClientStreamingServer) error
	ServerStreaming(*SimpleRequest, Example_ServerStreamingServer) error
	BidiStreaming(Example_BidiStreamingServer) error
}

func RegisterExampleServer(s *grpc.Server, srv ExampleServer) {
	s.RegisterService(&_Example_serviceDesc, srv)
}

func _Example_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).Unary(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryMessage(ctx, req.(*UnaryMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryRepeated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRepeatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryRepeated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryRepeated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryRepeated(ctx, req.(*UnaryRepeatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryRepeatedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRepeatedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryRepeatedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryRepeatedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryRepeatedMessage(ctx, req.(*UnaryRepeatedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryRepeatedEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRepeatedEnumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryRepeatedEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryRepeatedEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryRepeatedEnum(ctx, req.(*UnaryRepeatedEnumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryMap(ctx, req.(*UnaryMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryMapMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryMapMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryMapMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryMapMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryMapMessage(ctx, req.(*UnaryMapMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryOneof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryOneofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryOneof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryOneof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryOneof(ctx, req.(*UnaryOneofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UnaryEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryEnumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UnaryEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Example/UnaryEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UnaryEnum(ctx, req.(*UnaryEnumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).ClientStreaming(&exampleClientStreamingServer{stream})
}

type Example_ClientStreamingServer interface {
	SendAndClose(*SimpleResponse) error
	Recv() (*SimpleRequest, error)
	grpc.ServerStream
}

type exampleClientStreamingServer struct {
	grpc.ServerStream
}

func (x *exampleClientStreamingServer) SendAndClose(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleClientStreamingServer) Recv() (*SimpleRequest, error) {
	m := new(SimpleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Example_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServer).ServerStreaming(m, &exampleServerStreamingServer{stream})
}

type Example_ServerStreamingServer interface {
	Send(*SimpleResponse) error
	grpc.ServerStream
}

type exampleServerStreamingServer struct {
	grpc.ServerStream
}

func (x *exampleServerStreamingServer) Send(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Example_BidiStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).BidiStreaming(&exampleBidiStreamingServer{stream})
}

type Example_BidiStreamingServer interface {
	Send(*SimpleResponse) error
	Recv() (*SimpleRequest, error)
	grpc.ServerStream
}

type exampleBidiStreamingServer struct {
	grpc.ServerStream
}

func (x *exampleBidiStreamingServer) Send(m *SimpleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleBidiStreamingServer) Recv() (*SimpleRequest, error) {
	m := new(SimpleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Example_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _Example_Unary_Handler,
		},
		{
			MethodName: "UnaryMessage",
			Handler:    _Example_UnaryMessage_Handler,
		},
		{
			MethodName: "UnaryRepeated",
			Handler:    _Example_UnaryRepeated_Handler,
		},
		{
			MethodName: "UnaryRepeatedMessage",
			Handler:    _Example_UnaryRepeatedMessage_Handler,
		},
		{
			MethodName: "UnaryRepeatedEnum",
			Handler:    _Example_UnaryRepeatedEnum_Handler,
		},
		{
			MethodName: "UnaryMap",
			Handler:    _Example_UnaryMap_Handler,
		},
		{
			MethodName: "UnaryMapMessage",
			Handler:    _Example_UnaryMapMessage_Handler,
		},
		{
			MethodName: "UnaryOneof",
			Handler:    _Example_UnaryOneof_Handler,
		},
		{
			MethodName: "UnaryEnum",
			Handler:    _Example_UnaryEnum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreaming",
			Handler:       _Example_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreaming",
			Handler:       _Example_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiStreaming",
			Handler:       _Example_BidiStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x6d, 0x6f, 0xd2, 0x50,
	0x14, 0xa6, 0x14, 0x0a, 0x3d, 0x93, 0x0d, 0xef, 0x90, 0xe0, 0x08, 0x4a, 0xaa, 0x26, 0x84, 0x0f,
	0xb8, 0xa0, 0x6e, 0xbe, 0x45, 0x03, 0x06, 0x9d, 0x31, 0x73, 0x49, 0x89, 0x9f, 0xcd, 0x35, 0x9c,
	0x91, 0x66, 0x6d, 0xa9, 0x6d, 0x21, 0xe2, 0xdf, 0x30, 0xfe, 0x5f, 0x73, 0xef, 0xe5, 0xda, 0xdb,
	0xb2, 0x2e, 0xdb, 0xbe, 0xdd, 0x9e, 0x73, 0x9e, 0xe7, 0x3c, 0xe7, 0x2d, 0x05, 0x93, 0x06, 0xce,
	0x20, 0x08, 0x17, 0xf1, 0x82, 0xe8, 0x34, 0x70, 0xac, 0x17, 0x50, 0x9b, 0x3a, 0x5e, 0xe0, 0xa2,
	0x8d, 0x3f, 0x97, 0x18, 0xc5, 0x84, 0x40, 0xc9, 0xa7, 0x1e, 0xb6, 0xb4, 0xae, 0xd6, 0x33, 0x6d,
	0xfe, 0x26, 0x75, 0xd0, 0xe9, 0x1c, 0x5b, 0xc5, 0xae, 0xd6, 0x2b, 0xdb, 0xec, 0x69, 0xf5, 0x61,
	0x57, 0xc2, 0xa2, 0x60, 0xe1, 0x47, 0x48, 0x5a, 0x50, 0xf1, 0x30, 0x8a, 0x58, 0x9c, 0x80, 0xca,
	0x4f, 0x6b, 0x0c, 0xa5, 0xaf, 0x8c, 0xa5, 0x03, 0x70, 0xee, 0x84, 0x51, 0xfc, 0x5d, 0xe1, 0x37,
	0xb9, 0x85, 0xbb, 0xdb, 0x60, 0xba, 0x54, 0x7a, 0x8b, 0xdc, 0x5b, 0x65, 0x06, 0xe6, 0xb4, 0x9e,
	0xc3, 0xfe, 0x37, 0x9f, 0x86, 0xeb, 0x53, 0xc1, 0x29, 0xc5, 0x76, 0x14, 0xb1, 0x3b, 0x43, 0x73,
	0xc0, 0x8a, 0x63, 0xf1, 0x42, 0xb7, 0xd5, 0x87, 0x06, 0x47, 0xd9, 0x18, 0x20, 0x8d, 0x71, 0xb6,
	0x5d, 0xa3, 0x2e, 0x6b, 0xb4, 0xde, 0x42, 0x3b, 0x15, 0x9b, 0x9b, 0x49, 0xbf, 0x2c, 0xd3, 0x08,
	0x5a, 0x29, 0xf4, 0xc4, 0x5f, 0x7a, 0x12, 0xfa, 0x04, 0x2a, 0x73, 0xf4, 0x67, 0x18, 0x46, 0x1c,
	0xbd, 0x3b, 0xdc, 0xe1, 0xe8, 0x4f, 0xdc, 0x66, 0x4b, 0x9f, 0xf5, 0x1b, 0xf6, 0x44, 0x89, 0x34,
	0x90, 0xc8, 0xa7, 0xa0, 0x5f, 0xac, 0xa2, 0x4d, 0xce, 0x0e, 0x47, 0x65, 0x42, 0x06, 0x5f, 0x56,
	0xd1, 0xc4, 0x8f, 0xc3, 0xb5, 0xcd, 0x22, 0x0f, 0x8e, 0xa0, 0x2a, 0x0d, 0x6c, 0x68, 0x17, 0xb8,
	0xde, 0xf4, 0x99, 0x3d, 0x49, 0x03, 0xca, 0x2b, 0xea, 0x2e, 0x65, 0x77, 0xc5, 0xc7, 0xeb, 0xe2,
	0x4b, 0xcd, 0xfa, 0xa3, 0x41, 0x53, 0x32, 0x67, 0x0a, 0x3f, 0x52, 0x35, 0x3c, 0x4e, 0x69, 0x48,
	0x47, 0x66, 0xa4, 0x8c, 0xae, 0x94, 0xf2, 0x50, 0x95, 0x92, 0xea, 0xa7, 0xa2, 0xca, 0x86, 0xbb,
	0x3c, 0xd5, 0x99, 0x8f, 0x8b, 0xf3, 0x64, 0x10, 0xba, 0x17, 0xcd, 0xb7, 0x26, 0x7e, 0x52, 0xb0,
	0x99, 0x9d, 0x34, 0xa1, 0x1c, 0xb8, 0xd4, 0xf1, 0x45, 0x8d, 0x27, 0x05, 0x5b, 0x7c, 0x8e, 0x0d,
	0x31, 0x3f, 0xeb, 0x18, 0xea, 0x9c, 0x53, 0x1d, 0xd0, 0x23, 0x30, 0xc4, 0x10, 0x38, 0x6b, 0x66,
	0x3e, 0x1b, 0x57, 0xff, 0x01, 0x18, 0xc2, 0x42, 0xaa, 0x50, 0x3a, 0xa5, 0x2e, 0xd6, 0x0b, 0x04,
	0xc0, 0xf8, 0x88, 0x1e, 0x7b, 0x6b, 0xc3, 0xbf, 0x06, 0x54, 0x26, 0xbf, 0x28, 0xbb, 0x09, 0x32,
	0x84, 0x32, 0x4f, 0x42, 0x08, 0x67, 0x4a, 0x1d, 0xd8, 0xc1, 0x7e, 0xca, 0x26, 0xae, 0xc7, 0x2a,
	0x90, 0xf7, 0x70, 0x47, 0xdd, 0x70, 0xd2, 0x52, 0x5a, 0x9d, 0xea, 0x73, 0x1e, 0xc1, 0x08, 0x6a,
	0xa9, 0x15, 0x24, 0xf7, 0x13, 0x86, 0xcc, 0x01, 0xe4, 0x51, 0x9c, 0x65, 0xee, 0x45, 0x6a, 0xe9,
	0x6e, 0x33, 0x5d, 0x4f, 0xd3, 0xe7, 0xcd, 0x04, 0xd5, 0xb3, 0x20, 0x9d, 0x6d, 0x36, 0x65, 0x1a,
	0x79, 0x54, 0xc7, 0x50, 0x95, 0x7b, 0x47, 0x1a, 0x97, 0x9d, 0x42, 0x1e, 0x70, 0x92, 0xdc, 0x95,
	0xac, 0xa7, 0x7d, 0xc5, 0x1a, 0xe7, 0xd1, 0xbc, 0x01, 0x48, 0x96, 0x91, 0x34, 0x13, 0x06, 0x75,
	0x3b, 0xf3, 0xc0, 0xaf, 0xc0, 0xfc, 0xbf, 0x75, 0xe4, 0x5e, 0x82, 0xbd, 0x46, 0xdd, 0xef, 0x60,
	0xef, 0x83, 0xeb, 0xa0, 0x1f, 0x4f, 0xe3, 0x10, 0xa9, 0xe7, 0xf8, 0xf3, 0x1b, 0x6c, 0x55, 0x4f,
	0x63, 0xf8, 0x29, 0x86, 0x2b, 0x0c, 0x6f, 0x83, 0x3f, 0x64, 0xf8, 0xda, 0xd8, 0x99, 0x39, 0xb7,
	0xcb, 0x7e, 0xa8, 0xfd, 0x30, 0xf8, 0xcf, 0xe6, 0xd9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e,
	0x98, 0x12, 0xe6, 0x79, 0x06, 0x00, 0x00,
}
